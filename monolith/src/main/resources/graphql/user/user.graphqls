type User {
    id: ID!
    username: String!
    email: String!
    country: Country!
    role: Role!
    notifications: [Notification!]!
}

type Country {
    id: ID!
    name: String!
}

type Role{
    id: ID!
    name: String!
}

type Notification {
    id: ID!
    content: String!
    read: Boolean!
}

input UserRequestDTO{
    id: ID
    username: String!
    password: String!
    email: String!
    countryId:ID!
    roleId: ID!
}

input UserLoginDTO{
    username:String!
    password:String!
}

extend type Query {
    getUsers: [User]
    getUser(id: ID): User
    getUserByUsername(username: String!): User
    checkUserLogin(user: UserLoginDTO!): Boolean
}

extend type Mutation{
    insertUser(input: UserRequestDTO): User
    updateUser(input: UserRequestDTO): User
}